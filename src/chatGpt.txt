Modify this code so that the table has a row for all of the totals of calories, proteins, and fats.


`FoodEntryForm.js`
```javascript
import React, { useState, useEffect, useRef } from 'react';
import { Button, Form, Dropdown, Icon, Input } from 'semantic-ui-react';
import { calculateTotalNutritionalValues } from './Calculations';

function FoodEntryForm({ handleEntry, foods }) {
  const [selectedFoods, setSelectedFoods] = useState([{ food: '', unit: '', servingSize: '', id: 0 }]);
  const foodOptions = foods.map(food => ({ key: food.food_id, text: food.food_name, value: food.food_name }));
  const solidUnits = ['oz', 'g', 'lb(s)', 'kg(s)'];
  const liquidUnits = ['fl oz', 'mL', 'cup', 'tbsp', 'tsp', 'ltr'];
  const formRef = useRef(null);

  const handleChange = (e, { value }, index, field) => {
    const newSelectedFoods = [...selectedFoods];
    newSelectedFoods[index][field] = value;
    setSelectedFoods(newSelectedFoods);
  };

  const addFoodDropdown = (event) => {
    event.preventDefault();
    setSelectedFoods([...selectedFoods, { food: '', unit: '', servingSize: '', id: selectedFoods.length }]);
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    const newEntries = selectedFoods.map(selectedFood => {
      const food = foods.find(food => food.food_name === selectedFood.food);
      if (food) {
        const totalNutritionalValues = calculateTotalNutritionalValues(food, selectedFood.servingSize, selectedFood.unit);
        return {
          food: selectedFood.food,
          calories: totalNutritionalValues.totalCalories,
          proteins: totalNutritionalValues.totalProteins,
          fats: totalNutritionalValues.totalFats,
          carbohydrates: totalNutritionalValues.totalCarbs
        };
      }
      return null;
    }).filter(entry => entry !== null);

    if (newEntries.length > 0) {
      handleEntry(newEntries);
      setSelectedFoods([{ food: '', unit: '', servingSize: '', id: 0 }]);
    }
  };

  return (
    <>
      <Form onSubmit={handleSubmit} ref={formRef}>
        {selectedFoods.map((selectedFood, index) => {
          const food = foods.find(food => food.food_name === selectedFood.food);
          const isSolid = food ? food.is_solid : null;
          const unitOptions = (isSolid ? solidUnits : liquidUnits).map(unit => ({ key: unit, text: unit, value: unit }));

          return (
            <div key={selectedFood.id} style={{ marginBottom: '1em' }}>
              <Dropdown
                fluid
                search
                selection
                options={foodOptions}
                placeholder='Select food'
                value={selectedFood.food}
                onChange={(e, data) => handleChange(e, data, index, 'food')}
                style={{ marginBottom: '1em' }}
              />
              <Input
                placeholder='Size'
                type='number'
                disabled={!selectedFood.food}
                value={selectedFood.servingSize}
                onChange={(e) => handleChange(e, { value: e.target.value }, index, 'servingSize')}
                style={{ width: '30%' }}
              />
              <Dropdown
                compact
                search
                selection
                options={unitOptions}
                placeholder='Unit'
                disabled={!selectedFood.food}
                value={selectedFood.unit}
                onChange={(e, data) => handleChange(e, data, index, 'unit')} style={{ width: '70%' }}
              />
            </div>
          );
        })}
        <Button icon fluid onClick={(e) => addFoodDropdown(e)} style={{ marginBottom: '1em' }}>
          <Icon name='add circle' />
        </Button>
        <Button fluid style={{ marginBottom: '1em' }} type='submit'>
          Submit Entry
        </Button>
      </Form>
    </>
  );
}

export default FoodEntryForm;
```

`FoodEntry.js`
```javascript
import React from 'react';
import { Button, Table } from 'semantic-ui-react';

function FoodEntry({ food, calories, proteins, fats, carbohydrates, deleteEntry }) {
  return (
    <Table.Row>
      <Table.Cell>{food}</Table.Cell>
      <Table.Cell>{calories}</Table.Cell>
      <Table.Cell>{proteins}</Table.Cell>
      <Table.Cell>{fats}</Table.Cell>
      <Table.Cell>{carbohydrates}</Table.Cell>
      <Table.Cell>
        <Button onClick={deleteEntry}>Delete</Button>
      </Table.Cell>
    </Table.Row>
  );
}

export default FoodEntry;
```

`FoodEntryStack.js`
```
import React, { useState, useEffect } from 'react';
import { Table, Card } from 'semantic-ui-react';
import FoodEntry from './FoodEntry';
import FoodEntryForm from './FoodEntryForm';

function FoodEntryStack() {
  const [tables, setTables] = useState([]); // Add this line to create a state for tables
  const [foods, setFoods] = useState([]);

  useEffect(() => {
    const fetchFoods = async () => {
      const response = await fetch('http://localhost:8000/nutrition');
      const data = await response.json();
      setFoods(data.data);
    };
    fetchFoods();
  }, []);

  const getCurrentDate = () => {
    const today = new Date();
    return today.toLocaleDateString();
  };

  const handleEntry = (newEntries) => {
    setTables((prevTables) => [
      ...prevTables,
      { entries: newEntries, id: prevTables.length, date: getCurrentDate() },
    ]);
  };

  const deleteEntry = (tableIndex, entryIndex) => {
    setTables((prevTables) => {
      const updatedTables = prevTables.map((table, index) =>
        index === tableIndex
          ? {
              ...table,
              entries: table.entries.filter((_, i) => i !== entryIndex),
            }
          : table
      );
      return updatedTables;
    });
  };



return (
  <div>
    {tables.map((table, tableIndex) => (
              <div key={table.id}>
              <Card fluid>
                <Card.Content>
                  <Card.Header>{table.date}</Card.Header>
                </Card.Content>
              </Card>
      <Table celled key={table.id}>
        <Table.Header>
        <Table.Row>
              <Table.HeaderCell>Food</Table.HeaderCell>
              <Table.HeaderCell>Calories</Table.HeaderCell>
              <Table.HeaderCell>Proteins</Table.HeaderCell>
              <Table.HeaderCell>Fats</Table.HeaderCell>
              <Table.HeaderCell>Carbohydrates</Table.HeaderCell>
              <Table.HeaderCell>Action</Table.HeaderCell>
            </Table.Row>
        </Table.Header>
        <Table.Body>
          {table.entries.map((entry, entryIndex) => (
              <FoodEntry
                key={entryIndex}
                food={entry.food}
                calories={entry.calories}
                proteins={entry.proteins}
                fats={entry.fats}
                carbohydrates={entry.carbohydrates}
                deleteEntry={() => deleteEntry(tableIndex, entryIndex)}
              />
            ))}
          <Table.Row>
            <Table.Cell><strong>Total</strong></Table.Cell>
            <Table.Cell><strong>{table.entries.reduce((acc, entry) => acc + entry.calories, 0)}</strong></Table.Cell>
            <Table.Cell><strong>{table.entries.reduce((acc, entry) => acc + entry.proteins, 0)}</strong></Table.Cell>
            <Table.Cell><strong>{table.entries.reduce((acc, entry) => acc + entry.fats, 0)}</strong></Table.Cell>
            <Table.Cell><strong>{table.entries.reduce((acc, entry) => acc + entry.carbohydrates, 0)}</strong></Table.Cell>
            <Table.Cell></Table.Cell>
          </Table.Row>
        </Table.Body>
      </Table>
      </div>
    ))}
    <FoodEntryForm handleEntry={handleEntry} foods={foods} />
  </div>
);
}

export default FoodEntryStack;
```

`App.js`
```
import './App.css';
import React from 'react';
import { Container, Header, Image, Segment } from 'semantic-ui-react';
import FoodEntryStack from './components/FoodEntryStack';
import logo from './logo.png';

function App() {
  return (
    <div>
      <Segment inverted textAlign='center' style={{ padding: '1em 0em', backgroundColor: '#393e46' }}>
        <Header as='h1' style={{ fontFamily: 'Kaushan Script', fontSize: '4em', margin: 0, color: '#eeeeee' }}>
          <Image src={logo} style={{ width: '2em', height: '2em', marginRight: '0.5em' }} />
          Dear Dairy
        </Header>
      </Segment>
      <Container style={{ marginTop: '2em' }}>
        <Header as='h3' dividing textAlign='center'>Write Your Diary Entries Here!</Header>
        <FoodEntryStack />
      </Container>
    </div>
  );
}

export default App;
```